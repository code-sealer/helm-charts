# This file contains default values for the Codesealer Helm chart.

###################################
##        Global settings        ##
###################################

# The access token used to pull Codesealer images. This must be set.
codesealerToken: ""

# Global settings for Docker images.
image:
  # Which repository to pull images from.
  repository: ghcr.io/code-sealer

  # The image pull policy to use for all images.
  pullPolicy: Always

# Set to override the chart name used.
nameOverride: ""

# Set to override the fully qualified app name used.
fullnameOverride: ""

# The name of the Codesealer namespace.
namespace: "codesealer-system"

# Settings for the Codesealer service account.
serviceAccount:
  # Specifies whether a service account should be created.
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template.
  name: ""

###################################
##        Worker settings        ##
###################################

worker:
  # Name to use for worker related resources.
  name: codesealer-core

  # Docker image to use for the workers.
  image: release/codesealer-core-hybrid-modsec

  # Docker image tag to use for the workers.
  tag: latest

  # Number of workers to create in standalone mode.
  replicaCount: 1

  # URL for the Codesealer Control Plane.
  controlURL: ""

  # Cluster key for API access to the Control Plane.
  clusterKey: ""

  # Settings that determine how to create a service for the Workers.
  # A service is only created in standalone mode.
  service:
    type: ClusterIP
    name: https
    port: 8443

  # Settings for the CA used to sign certificates for the Workers.
  ca:
    # Set to false if manually creating certificates. In this case, provide the cert and
    # key values below.
    create: true

    # A base64 encoded PEM format certificate and key.
    cert: ""
    key: ""

    # Expiry time of CA in days for generated certs.
    expiration: 365

  # Settings for the certificates used by the Workers.
  cert:
    # Set to false if manually creating certificates. In this case, provide the cert and
    # key values below.
    create: true

    # Name of the TLS secret.
    name: codesealer-worker-tls

    # A base64 encoded PEM format certificate and key.
    cert: ""
    key: ""

  # Worker configuration.
  config:
    ################################################
    #               Network settings               #
    ################################################
    # The 'network' section defines the basic server configuration of the reverse proxy.
    network:
      # The IP and port to listen for requests on.
      listen: 9443
      # If true, TLS will be enabled.
      tls: true
      # Sets the minimum TLS version the reverse proxy will use. Allowed values are:
      # 'TLS1.0', 'TLS1.1', 'TLS1.2', 'TLS1.3'
      # If this option is not set, TLS 1.2 is used as the default.
      tlsMinVersion: "TLS1.2"
      # Paths for TLS certificate and key files that are used if 'network.tls' is set to true.
      # When using the Management Portal, this certificate and key will be used as fallback
      # when *no* certificate and key is specified in the Management Portal.
      certFile: "./certs/tls.crt"
      keyFile: "./certs/tls.key"
      # If 'true', this Worker will  be able to provision certificates via Let's Encrypt. Note
      # that each endpoint where Let's Encrypt certificates are want must also have the
      # 'endpoint.letsEncrypt' value set to 'true'.
      letsEncrypt: false
      # If 'true', TLS certificate errors from the backend server will be ignored.
      # This is for example useful if self-signed or otherwise internal certificates are used.
      ignoreTLS: true
      # 'network.disallowPrivate' ensures that private IP addresses cannot be accessed by the
      # proxy. 'network.disallowLocal' ensures that that only global unicast addresses can be
      # accessed by the proxy, disallowing addresses such as loopback or multicast addresses
      # (note that private addresses count as global). These options are useful to restrict
      # Management Portal users from attempting to access local or private infrastructure.
      disallowLocal: false
      disallowPrivate: false
      # The timeout, in seconds, before giving up on requests to the backend server.
      remoteTimeout: 5
      # If true, the Worker will assume that the last entry in the last `X-Forwarded-For`
      # header is the actual client IP for use in logs and IP allow-lists for endpoints.
      # Additionally the last field in X-Forwarded-Proto will be used to determine whether to
      # set "Secure" on outgoing cookies.
      # Incompatible with 'network.useProxyProtocol'.
      behindProxy: false
      # When true, PROXY protocol will be enabled on the listening socket. Both version 1
      # (text based) and version 2 (binary based) are supported. Incompatible with
      # 'network.behindProxy'.
      useProxyProtocol: false

    ################################################
    #             Bootloader settings              #
    ################################################
    # The 'bootloader' section contains some basic configuration of the Bootloader.
    bootloader:
      # Whether to use TLS for redis connections
      redisUseTLS: false
      # The maximum number of Redis connections to pool. Note that this is per Worker
      # instance, so keep this in mind if you are subject to connection limitations.
      redisMaxConn: 100
      # If 'true', TLS certificate errors for Redis will be ignored.
      redisIgnoreTLS: true
      # Redis connect timeout specified in milliseconds. Defaults to 50 if not set.
      redisConnectTimeout: 50
      # Redis read timeout specified in milliseconds. Defaults to 250 if not set.
      redisReadTimeout: 250
      # Redis write timeout specified in milliseconds. Defaults to 250 if not set.
      redisWriteTimeout: 250
      # Path to a configuration file for the Web Application Firewall. The file must contain a
      # set of ModSecurity rules.
      modSecurityConf: "./modsec.conf"
      # This sets the prefix all HTTP requests related to the bootloader will get. It is
      # crucial that this is chosen to avoid potential clashes with actual served files. # The
      # bootPrefix must start and end with '/', and can only contain characters
      # 'A-Za-z0-9_.~-'.
      bootPrefix: "/~bl/"
      # Can be set to "redis" or "local". For "redis", state is shared amongst
      # workers through the configured Redis instance. With "local", state is stored
      # in memory in the worker. The "redis" instance is required for sharing
      # sessions across multiple workers and for persistence across restarts. The
      # recommended value is "redis".
      sessionBackend: "redis"

    ################################################
    #               Cache settings                 #
    ################################################
    # The 'cache' settings controls some basic settings of the Worker's HTTP cache.
    cache:
      # A path to folder where the cached files will be stored. The path must be absolute.
      # Note that *all* contents of the folder will be deleted when the Worker starts.
      folder: ""
      # The maximum file size to cache, in bytes.
      maxFileSize: 0
      # The maximum total size of the cache, in bytes.
      maxSize: 0

  ################################################
  #                 WAF settings                 #
  ################################################
  waf:
    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#user-content-SecRuleEngine
    SecRuleEngine: "On"

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#user-content-SecRequestBodyAccess
    SecRequestBodyAccess: "On"

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#secrequestbodylimit
    SecRequestBodyLimit: "13107200"

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#secrequestbodynofileslimit
    SecRequestBodyNoFilesLimit: "131072"

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#secrequestbodylimitaction
    SecRequestBodyLimitAction: Reject

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#secresponsebodyaccess
    SecResponseBodyAccess: "On"

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#secresponsebodylimit
    SecResponseBodyLimit: "524288"

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#secresponsebodylimitaction
    SecResponseBodyLimitAction: ProcessPartial

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#secdebugloglevel
    SecDebugLogLevel: 0

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#user-content-SecAuditEngine
    SecAuditEngine: "Off"

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#secauditlogrelevantstatus
    SecAuditLogRelevantStatus: "^(?:5|4(?!04))"

    # https://github.com/owasp-modsecurity/ModSecurity/wiki/Reference-Manual-(v3.x)#user-content-SecAuditLogParts
    SecAuditLogParts: ABIJDEFHZ

    crs:
      # https://coreruleset.org/docs/concepts/paranoia_levels/
      blocking_paranoia_level: 1
      detection_paranoia_level: 1

      # ModSecurity selects the body processor based on the Content-Type request
      # header. But clients are not always setting the Content-Type header for their
      # request body payloads. This will leave ModSecurity with limited vision into
      # the payload.  The variable tx.enforce_bodyproc_urlencoded lets you force the
      # URLENCODED body processor in these situations. This is off by default, as it
      # implies a change of the behaviour of ModSecurity beyond CRS (the body
      # processor applies to all rules, not only CRS) and because it may lead to
      # false positives already on paranoia level 1. However, enabling this variable
      # closes a possible bypass of CRS so it should be considered.
      enforce_bodyproc_urlencoded: 0

      # https://coreruleset.org/docs/concepts/anomaly_scoring/
      critical_anomaly_score: 5
      error_anomaly_score: 4
      warning_anomaly_score: 3
      notice_anomaly_score: 2
      inbound_anomaly_score_threshold: 5
      outbound_anomaly_score_threshold: 4

    # https://coreruleset.org/docs/rules/rules/
    rules:
      # Request: Initialization
      rules901: true
      # Request: Common Exceptions
      rules905: true
      # Request: Method Enforcement
      rules911: false
      # Request: Scanner Detection
      rules913: true
      # Request: Protocol Enforcement
      rules920: false
      # Request: Protocol Attack
      rules921: true
      # Request: Multipart Attack
      rules922: false
      # Request: Application Attack LFI
      rules930: true
      # Request: Application Attack RFI
      rules931: false
      # Request: Application Attack RCE
      rules932: false
      # Request: Application Attack PHP
      rules933: false
      # Request: Application Attack Generic
      rules934: false
      # Request: Application Attack XSS
      rules941: true
      # Request: Application Attack SQLi
      rules942: true
      # Request: Application Attack Session Fixation
      rules943: true
      # Request: Application Attack Java
      rules944: false
      # Request: Blocking Evaluation
      rules949: true
      # Response: Data Leakages
      rules950: false
      # Response: Data Leakages SQL
      rules951: false
      # Response: Data Leakages Java
      rules952: false
      # Response: Data Leakages PHP
      rules953: false
      # Response: Data Leakages IIS
      rules954: false
      # Response: Web Shells
      rules955: false
      # Response: Blocking Evaluation
      rules959: false
      # Response: Correlation
      rules980: false

###################################
##        Manager settings       ##
###################################

manager:
  # Name to use for worker related resources.
  name: core-manager

  # Docker image to use for the workers.
  image: release/core-manager

  # Docker image tag to use for the workers.
  tag: latest

  # An initial seed value for organization settings.
  init: ""

  # Settings that determine how to create a service for the Manager.
  service:
    type: ClusterIP
    name: https
    port: 8444

  # Settings for the CA used to sign certificates for the Manager.
  ca:
    # Set to false if manually creating certificates. In this case, provide the cert and
    # key values below.
    create: true

    # A base64 encoded PEM format certificate and key.
    cert: ""
    key: ""

    # Expiry time of CA in days for generated certs.
    expiration: 365

  # Settings for the certificates used by the Manager.
  cert:
    # Set to false if manually creating certificates. In this case, provide the cert and
    # key values below.
    create: true

    # Name of the TLS secret.
    name: codesealer-manager-tls

    # A base64 encoded PEM format certificate and key.
    cert: ""
    key: ""

  # Manager configuration
  config:
    # The IP and port to listen for requests on.
    listen: 7443
    # If true, TLS will be enabled.
    tls: true
    # Paths for TLS certificate and key files, if 'manager.tls' is set to true.
    certFile: "./tls.crt"
    keyFile: "./tls.key"
    # Configuration of Let's Encrypt certificates.
    letsEncrypt: false
    letsEncryptDomain: ""

    # The 'manager.backend' section defines how to connect to Redis and InfluxDB.
    # Multiple backends can be defines in order for one Management Portal to connect to
    # several sets of workers.
    backend:
      # The name of the backend.
      backendID: "default"

###################################
##       Sidecar settings        ##
###################################

sidecar:
  # If true, Codesealer is deployed as a side car to an existing ingress.
  enabled: false

  # Settings for the ingress to inject Codesealer into.
  ingress:
    # Namespace of the ingress.
    namespace: ingress-nginx

    # The targeted ingress deployment.
    deployment: ingress-nginx-controller

    # The port used by the ingress.
    port: 443

  # If enabled Codesealer will use an initContainer to do the iptables pre-route.
  # If not enabled (false), it will use Codesealer's CNI which will be installed.
  initContainers:
    enabled: true
    name: codesealer-init-networking
    image: codesealer-init-networking
    tag: latest

  # Settings that affect the webhook used to inject Codesealer.
  webhook:
    # Name to use for webhook related resources.
    name: codesealer-mutating-webhook

    # Docker image to use for the webhooks.
    image: codesealer-webhook

    # Docker image tag to use for the webhooks.
    tag: latest

    # Number of webhooks to create.
    replicaCount: 1

    # Settings that determine how to create a service for the webhook.
    service:
      type: ClusterIP
      name: https
      port: 443
      targetPort: 8443
      scheme: HTTPS

    # The path for the webhook.
    path: "/mutate-codesealer"

    # How the mutating webhook fails.
    failurePolicy: Ignore

    # The timeout for the webhook.
    timeout: 5

    # default to None.
    sideEffects: "None"

    # default to Never.
    reinvocationPolicy: "Never"

    # Settings for the CA used to sign certificates for the Webhook.
    ca:
      # Set to false if manually creating certificates. In this case, provide the cert and
      # key values below.
      create: true

      # A base64 encoded PEM format certificate and key.
      cert: ""
      key: ""

      # Expiry time of CA in days for generated certs.
      expiration: 365

    # Settings for the certificates used by the Webhook.
    cert:
      # Set to false if manually creating certificates. In this case, provide the cert and
      # key values below.
      create: true

      # Name of the TLS secret.
      name: codesealer-webhook-tls

      # A base64 encoded PEM format certificate and key.
      cert: ""
      key: ""

    env:
      SSL_CRT_FILE_NAME: "/certs/tls.crt"
      SSL_KEY_FILE_NAME: "/certs/tls.key"
      PATCH_FILE_NAME: "/patch/patch.yaml"

###################################
##       Dependecy settings      ##
###################################

redis:
  # If true, the Redis subchart will be installed. See the chart's values with
  #   helm show values oci://registry-1.docker.io/bitnamicharts/redis | bat
  # for a full list of all values that can be overridden.
  install: true

  namespaceOverride: "codesealer-system"

  service:
    name: "redis-master"
    ports:
      redis: 6379

  replica:
    replicaCount: 1

  auth:
    enabled: true

    # Explicitly set a password for Redis, instead of autogenerating one.
    # Note that a password must be set in two case:
    # * When running Codesealer in sidecar mode.
    # * When running Codesealer in standalone mode while installing redis in a separate
    #   namespace.
    password: ""

# Settings for the Ingress NGINX Controller subchart. This can be installed in standalone
# mode to expose the Workers outside the cluster.
#
# See the chart's values with
#   helm show values ingress-nginx --repo https://kubernetes.github.io/ingress-nginx
# for a full list of all values that can be overridden.
ingress-nginx:
  install: false

  namespaceOverride: "codesealer-system"

  controller:
    hostPort:
      enabled: false

    service:
      type: LoadBalancer
